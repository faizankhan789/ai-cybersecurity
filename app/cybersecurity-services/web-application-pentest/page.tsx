"use client"

import { useState } from "react"
import Link from "next/link"
import Image from "next/image"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { ArrowRight, Globe, Shield, AlertTriangle, CheckCircle, Download, Search } from "lucide-react"

const testingAreas = [
  {
    id: "owasp",
    title: "OWASP Top 10 Testing",
    description: "Comprehensive testing against the most critical web application security risks.",
    icon: <AlertTriangle className="h-8 w-8 text-red-600" />,
    vulnerabilities: [
      "Injection (SQL, NoSQL, LDAP, OS)",
      "Broken Authentication & Session Management",
      "Cross-Site Scripting (XSS)",
      "Insecure Direct Object References",
      "Security Misconfiguration",
      "Sensitive Data Exposure",
      "Missing Function Level Access Control",
      "Cross-Site Request Forgery (CSRF)",
      "Using Components with Known Vulnerabilities",
      "Unvalidated Redirects and Forwards"
    ],
  },
  {
    id: "authentication",
    title: "Authentication & Authorization",
    description: "Deep testing of login mechanisms, session management, and access controls.",
    icon: <Shield className="h-8 w-8 text-red-600" />,
    vulnerabilities: [
      "Weak password policies",
      "Session fixation attacks",
      "Authentication bypass",
      "Privilege escalation",
      "Multi-factor authentication bypass",
      "JWT token manipulation",
      "OAuth implementation flaws",
      "SAML assertion attacks"
    ],
  },
  {
    id: "business-logic",
    title: "Business Logic Testing",
    description: "Identifying flaws in application workflow and business process logic.",
    icon: <Globe className="h-8 w-8 text-red-600" />,
    vulnerabilities: [
      "Payment bypass mechanisms",
      "Workflow manipulation",
      "Race condition attacks",
      "Price manipulation",
      "Inventory manipulation",
      "Process flow bypasses",
      "Data validation flaws",
      "Time-based attacks"
    ],
  },
]

const tools = [
  { name: "Burp Suite Professional", category: "Web Proxy", logo: "/placeholder.svg?height=60&width=120" },
  { name: "OWASP ZAP", category: "Security Scanner", logo: "/placeholder.svg?height=60&width=120" },
  { name: "Acunetix", category: "Vulnerability Scanner", logo: "/placeholder.svg?height=60&width=120" },
  { name: "Netsparker", category: "Web Scanner", logo: "/placeholder.svg?height=60&width=120" },
  { name: "SQLMap", category: "SQL Injection", logo: "/placeholder.svg?height=60&width=120" },
  { name: "Nikto", category: "Web Scanner", logo: "/placeholder.svg?height=60&width=120" },
  { name: "BeEF", category: "Browser Exploitation", logo: "/placeholder.svg?height=60&width=120" },
  { name: "WireShark", category: "Traffic Analysis", logo: "/placeholder.svg?height=60&width=120" },
]

const methodology = [
  {
    phase: "1. Reconnaissance",
    description: "Information gathering and attack surface mapping",
    activities: [
      "Subdomain enumeration",
      "Technology stack identification",
      "Directory and file discovery",
      "Parameter discovery",
      "Social media intelligence",
    ]
  },
  {
    phase: "2. Vulnerability Assessment", 
    description: "Automated and manual vulnerability identification",
    activities: [
      "Automated scanning with multiple tools",
      "Manual code review",
      "Configuration analysis",
      "Third-party component analysis",
      "SSL/TLS assessment",
    ]
  },
  {
    phase: "3. Exploitation",
    description: "Proof of concept development and impact assessment",
    activities: [
      "Manual exploitation attempts",
      "Payload development",
      "Privilege escalation testing",
      "Data extraction testing",
      "Business impact assessment",
    ]
  },
  {
    phase: "4. Reporting",
    description: "Detailed documentation and remediation guidance",
    activities: [
      "Executive summary",
      "Technical vulnerability details",
      "Proof of concept evidence",
      "Risk assessment matrix",
      "Remediation recommendations",
    ]
  }
]

const pricingTiers = [
  {
    name: "Basic Web App Test",
    description: "Essential security testing for small applications",
    price: "$2,500",
    period: "per application",
    features: [
      "OWASP Top 10 testing",
      "Automated vulnerability scanning",
      "Manual testing for 5 key functions",
      "Basic report with findings",
      "30-day remediation support",
    ],
    cta: "Get Started",
    popular: false,
  },
  {
    name: "Comprehensive Testing",
    description: "Full-scope testing for medium to large applications",
    price: "$7,500",
    period: "per application",
    features: [
      "Complete OWASP testing suite",
      "Business logic testing",
      "Authentication & authorization testing",
      "API endpoint testing",
      "Detailed report with PoCs",
      "60-day remediation support",
      "Retest after fixes",
    ],
    cta: "Most Popular",
    popular: true,
  },
  {
    name: "Enterprise Assessment",
    description: "Multi-application testing with ongoing support",
    price: "Custom",
    period: "pricing",
    features: [
      "Multiple application testing",
      "Source code review",
      "Infrastructure testing",
      "Compliance gap analysis",
      "Quarterly retesting",
      "Dedicated security consultant",
      "Staff training sessions",
    ],
    cta: "Contact Sales",
    popular: false,
  },
]

export default function WebAppPentestPage() {
  const [targetUrl, setTargetUrl] = useState("")
  const [isScanning, setIsScanning] = useState(false)
  const [scanResults, setScanResults] = useState<{
    score: number
    vulnerabilities: Array<{
      severity: "Critical" | "High" | "Medium" | "Low"
      title: string
      description: string
      tool: string
    }>
  } | null>(null)

  const handleQuickScan = (e: React.FormEvent) => {
    e.preventDefault()
    if (!targetUrl.trim()) return

    setIsScanning(true)
    setScanResults(null)

    // Simulate scanning
    setTimeout(() => {
      setIsScanning(false)
      setScanResults({
        score: Math.floor(Math.random() * 40) + 60,
        vulnerabilities: [
          {
            severity: "High",
            title: "SQL Injection Vulnerability",
            description: "User input is not properly sanitized in login form",
            tool: "SQLMap"
          },
          {
            severity: "Medium", 
            title: "Cross-Site Scripting (XSS)",
            description: "Reflected XSS found in search parameter",
            tool: "Burp Suite"
          },
          {
            severity: "Low",
            title: "Information Disclosure",
            description: "Server version information exposed in HTTP headers",
            tool: "Nikto"
          }
        ]
      })
    }, 3000)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "Critical": return "text-purple-600 bg-purple-100"
      case "High": return "text-red-600 bg-red-100"
      case "Medium": return "text-orange-600 bg-orange-100"
      case "Low": return "text-yellow-600 bg-yellow-100"
      default: return "text-gray-600 bg-gray-100"
    }
  }

  return (
    <main className="flex flex-col min-h-screen">
      {/* Hero Section */}
      <section className="bg-gradient-to-br from-[#1A1A1A] to-[#3A0000] text-white py-20 px-4">
        <div className="container mx-auto max-w-6xl">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
            <div>
              <h1 className="text-4xl md:text-5xl font-bold font-mono mb-6">
                Web Application Penetration Testing
              </h1>
              <p className="text-xl mb-8 max-w-lg">
                Comprehensive security testing to identify vulnerabilities in your web applications before attackers do. OWASP Top 10 compliant testing with detailed remediation guidance.
              </p>
              <div className="flex flex-wrap gap-4">
                <Button asChild size="lg" variant="destructive" className="group">
                  <Link href="#demo">
                    Free Security Scan
                    <ArrowRight className="ml-2 h-4 w-4 group-hover:translate-x-1 transition-transform" />
                  </Link>
                </Button>
                <Button
                  asChild
                  size="lg"
                  variant="outline"
                  className="bg-transparent border-white text-white hover:bg-white/10"
                >
                  <Link href="#pricing">View Pricing</Link>
                </Button>
              </div>
            </div>
            <div className="relative h-[400px] hidden lg:block">
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="w-full h-full bg-red-500/10 rounded-lg backdrop-blur-sm border border-red-500/20">
                  {/* Web security visualization */}
                  <div className="absolute top-0 left-0 w-full h-full p-8">
                    <div className="grid grid-cols-3 gap-4 h-full">
                      <div className="bg-red-500/20 rounded animate-pulse"></div>
                      <div className="bg-orange-500/20 rounded animate-pulse" style={{animationDelay: "0.5s"}}></div>
                      <div className="bg-yellow-500/20 rounded animate-pulse" style={{animationDelay: "1s"}}></div>
                      <div className="bg-green-500/20 rounded animate-pulse" style={{animationDelay: "1.5s"}}></div>
                      <div className="bg-blue-500/20 rounded animate-pulse" style={{animationDelay: "2s"}}></div>
                      <div className="bg-purple-500/20 rounded animate-pulse" style={{animationDelay: "2.5s"}}></div>
                    </div>
                    <Globe className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 h-16 w-16 text-white" />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Testing Areas */}
      <section className="py-20 px-4 bg-white">
        <div className="container mx-auto max-w-6xl">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold mb-4">Web Application Testing Areas</h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              Comprehensive testing across all critical areas of web application security.
            </p>
          </div>

          <Tabs defaultValue="owasp" className="w-full">
            <TabsList className="grid w-full grid-cols-3 mb-8">
              {testingAreas.map((area) => (
                <TabsTrigger key={area.id} value={area.id}>
                  {area.title.split(' ')[0]}
                </TabsTrigger>
              ))}
            </TabsList>

            {testingAreas.map((area) => (
              <TabsContent key={area.id} value={area.id}>
                <Card>
                  <CardHeader>
                    <div className="flex items-center gap-4">
                      <div className="p-3 bg-red-100 rounded-full">{area.icon}</div>
                      <div>
                        <CardTitle className="text-2xl">{area.title}</CardTitle>
                        <CardDescription className="text-lg">{area.description}</CardDescription>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <h4 className="font-semibold mb-4">Vulnerabilities We Test For:</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                      {area.vulnerabilities.map((vuln, index) => (
                        <div key={index} className="flex items-start">
                          <div className="mr-2 mt-1.5 h-1.5 w-1.5 rounded-full bg-red-600"></div>
                          <span className="text-sm">{vuln}</span>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button asChild>
                      <Link href="/contact">Request {area.title} Service</Link>
                    </Button>
                  </CardFooter>
                </Card>
              </TabsContent>
            ))}
          </Tabs>
        </div>
      </section>

      {/* Quick Security Scan Demo */}
      <section id="demo" className="py-20 px-4 bg-gray-50">
        <div className="container mx-auto max-w-4xl">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold mb-4">Free Quick Security Scan</h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              Get a basic security assessment of your web application. This demo scan covers common vulnerabilities.
            </p>
          </div>

          <Card>
            <CardContent className="p-6">
              <form onSubmit={handleQuickScan} className="space-y-6">
                <div>
                  <label htmlFor="target-url" className="block text-sm font-medium mb-2">
                    Target Web Application URL:
                  </label>
                  <Input
                    id="target-url"
                    type="url"
                    value={targetUrl}
                    onChange={(e) => setTargetUrl(e.target.value)}
                    placeholder="https://your-website.com"
                    className="w-full"
                    required
                  />
                </div>

                <div className="flex justify-center">
                  <Button 
                    type="submit" 
                    disabled={!targetUrl.trim() || isScanning}
                    className="bg-red-600 hover:bg-red-700 flex items-center"
                  >
                    {isScanning ? "Scanning..." : "Start Security Scan"}
                    <Search className="ml-2 h-4 w-4" />
                  </Button>
                </div>
              </form>

              {scanResults && (
                <div className="mt-8 border-t pt-8">
                  <div className="flex items-center justify-between mb-6">
                    <h3 className="text-xl font-bold">Scan Results</h3>
                    <div className="flex items-center">
                      <span className="text-sm text-gray-500 mr-2">Security Score:</span>
                      <div className="w-32 bg-gray-200 rounded-full h-2.5">
                        <div
                          className={`h-2.5 rounded-full ${
                            scanResults.score >= 80 ? 'bg-green-500' : 
                            scanResults.score >= 60 ? 'bg-yellow-500' : 'bg-red-500'
                          }`}
                          style={{ width: `${scanResults.score}%` }}
                        ></div>
                      </div>
                      <span className="ml-2 font-medium">{scanResults.score}/100</span>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <h4 className="font-semibold">Vulnerabilities Found:</h4>
                    {scanResults.vulnerabilities.map((vuln, index) => (
                      <div key={index} className="bg-white p-4 rounded-lg border-l-4 border-l-red-500">
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <div className="flex items-center mb-2">
                              <Badge className={`text-xs ${getSeverityColor(vuln.severity)}`}>
                                {vuln.severity}
                              </Badge>
                              <span className="ml-2 font-medium">{vuln.title}</span>
                            </div>
                            <p className="text-sm text-gray-600 mb-2">{vuln.description}</p>
                            <p className="text-xs text-gray-500">Detected by: {vuln.tool}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="mt-6 flex justify-center">
                    <Button variant="outline" className="flex items-center">
                      <Download className="mr-2 h-4 w-4" />
                      Download Full Report
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </section>

      {/* Methodology */}
      <section className="py-20 px-4 bg-white">
        <div className="container mx-auto max-w-6xl">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold mb-4">Our Testing Methodology</h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              Systematic approach following industry best practices and OWASP testing guidelines.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {methodology.map((phase, index) => (
              <Card key={index} className="relative">
                <CardHeader>
                  <div className="absolute -top-4 -left-4 w-8 h-8 bg-red-600 text-white rounded-full flex items-center justify-center font-bold">
                    {index + 1}
                  </div>
                  <CardTitle className="text-lg">{phase.phase}</CardTitle>
                  <CardDescription>{phase.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-1">
                    {phase.activities.map((activity, i) => (
                      <li key={i} className="flex items-start text-sm">
                        <CheckCircle className="h-3 w-3 text-green-600 mr-2 mt-1 flex-shrink-0" />
                        <span>{activity}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Tools & Technologies */}
      <section className="py-20 px-4 bg-gray-50">
        <div className="container mx-auto max-w-6xl">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold mb-4">Professional Testing Tools</h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              We use industry-leading tools and techniques for comprehensive web application testing.
            </p>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
            {tools.map((tool, index) => (
              <Card key={index} className="text-center hover:shadow-lg transition-shadow">
                <CardContent className="p-6">
                  <Image
                    src={tool.logo || "/placeholder.svg"}
                    alt={`${tool.name} logo`}
                    width={120}
                    height={60}
                    className="h-12 object-contain mx-auto mb-3"
                  />
                  <h3 className="font-semibold text-sm mb-1">{tool.name}</h3>
                  <p className="text-xs text-gray-500">{tool.category}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Pricing */}
      <section id="pricing" className="py-20 px-4 bg-white">
        <div className="container mx-auto max-w-6xl">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold mb-4">Web App Testing Pricing</h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              Transparent pricing for comprehensive web application security testing.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {pricingTiers.map((tier, index) => (
              <Card key={index} className={`relative ${tier.popular ? "border-red-500 shadow-lg" : ""}`}>
                {tier.popular && (
                  <div className="absolute top-0 right-0 transform translate-x-2 -translate-y-2">
                    <Badge className="bg-red-500">Most Popular</Badge>
                  </div>
                )}
                <CardHeader>
                  <CardTitle>{tier.name}</CardTitle>
                  <CardDescription>{tier.description}</CardDescription>
                  <div className="mt-4">
                    <span className="text-3xl font-bold">{tier.price}</span>
                    <span className="text-gray-500 ml-2">{tier.period}</span>
                  </div>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {tier.features.map((feature, i) => (
                      <li key={i} className="flex items-start">
                        <CheckCircle className="h-4 w-4 text-green-600 mr-2 mt-0.5 flex-shrink-0" />
                        <span className="text-sm">{feature}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
                <CardFooter>
                  <Button asChild className={`w-full ${tier.popular ? "bg-red-600 hover:bg-red-700" : ""}`}>
                    <Link href="/contact">{tier.cta}</Link>
                  </Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 px-4 bg-gradient-to-br from-[#1A1A1A] to-[#3A0000] text-white">
        <div className="container mx-auto max-w-4xl text-center">
          <h2 className="text-3xl md:text-4xl font-bold mb-6">Secure Your Web Applications Today</h2>
          <p className="text-xl mb-8 max-w-2xl mx-auto">
            Don't wait for a breach. Get professional web application penetration testing to identify and fix vulnerabilities before attackers exploit them.
          </p>
          <Button asChild size="lg" variant="destructive" className="group">
            <Link href="/contact">
              Schedule Your Web App Security Test
              <ArrowRight className="ml-2 h-4 w-4 group-hover:translate-x-1 transition-transform" />
            </Link>
          </Button>
        </div>
      </section>
    </main>
  )
}